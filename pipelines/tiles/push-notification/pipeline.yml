resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:

- name: om-cli
  type: github-release
  source:
    user: pivotal-cf
    repository: om
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: pivnet-cli
  type: github-release
  source:
    user: pivotal-cf
    repository: pivnet-cli
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: jq
  type: github-release
  source:
    user: stedolan
    repository: jq
    access_token: ((git_token)) ## Optional: Removing this will cause you to hit the rate limit

- name: pipelines-repo
  type: git
  source:
    uri: ((git_url))
    branch: ((git_branch))
    username: ((git_username))
    password: ((git_token))

- name: pivnet-product
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ((product_name))
    product_version: ((product_version))

jobs:

- name: delete-product
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
    - get: om-cli
      params:
        globs:
        - "*-linux"

  - task: unstage-tile
    file: pipelines-repo/tasks/unstage-product/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: ((product_identifier))

  - task: apply-changes
    file: pipelines-repo/tasks/apply-changes/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))

- name: upload-product
  plan:
  - aggregate:
    - get: pipelines-repo
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*-linux"
    - get: pivnet-cli
      params:
        globs:
        - "*linux-amd64*"
    - get: jq
      params:
        globs:
        - "*linux64*"

  - task: upload-tile
    file: pipelines-repo/tasks/upload-product/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_token))

  - task: upload-stemcell
    file: pipelines-repo/tasks/stemcell-uploader/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PIVNET_API_TOKEN: ((pivnet_token))
      IAAS_TYPE: ((iaas_type))

- name: stage-product
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [upload-product]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs:
        - "*.pivotal"
      passed: [upload-product]
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*-linux"
      passed: [upload-product]

  - task: stage-tile
    file: pipelines-repo/tasks/stage-product/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: ((product_identifier))

- name: config-product
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [stage-product]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs: []
        save: true
      passed: [stage-product]
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*-linux"
      passed: [stage-product]
    - get: jq
      params:
        globs:
        - "*linux64*"
      passed: [upload-product]

  - task: config-tile
    file: pipelines-repo/tasks/config-p-push-notifications/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      NETWORK_NAME: ((network_name))
      SERVICE_NETWORK_NAME: ((service_network_name))
      OTHER_AZS: ((other_azs))
      SINGLETON_JOBS_AZ: ((singleton_jobs_az))
      PRODUCT_IDENTIFIER: ((product_identifier))
      ON_DEMAND_BROKER_GLOBAL_SERVICE_INSTANCE_QUOTA: ((on_demand_broker_global_service_instance_quota))
      ON_DEMAND_BROKER_STATIC_IPS: ((on_demand_broker_static_ips))
      DISK_ALARM_THRESHOLD: ((disk_alarm_threshold))
      GLOBAL_SETTINGS_SECURE_BINDINGS: ((global_settings_secure_bindings))
      GLOBAL_SETTINGS_SHAREABLE_INSTANCES: ((global_settings_shareable_instances))
      METRICS_POLLING_INTERVAL: ((metrics_polling_interval))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR: ((on_demand_broker_plan_10_selector))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR_ENABLED_CF_SERVICE_ACCESS: ((on_demand_broker_plan_10_selector_enabled_cf_service_access))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR_ENABLED_DESCRIPTION: ((on_demand_broker_plan_10_selector_enabled_description))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR_ENABLED_DISK_LIMIT_ACKNOWLEDGEMENT: ((on_demand_broker_plan_10_selector_enabled_disk_limit_acknowledgement))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR_ENABLED_FEATURES: ((on_demand_broker_plan_10_selector_enabled_features))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR_ENABLED_INSTANCE_QUOTA: ((on_demand_broker_plan_10_selector_enabled_instance_quota))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR_ENABLED_NAME: ((on_demand_broker_plan_10_selector_enabled_name))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR_ENABLED_RABBITMQ_AZ_PLACEMENT: ((on_demand_broker_plan_10_selector_enabled_rabbitmq_az_placement))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR_ENABLED_RABBITMQ_CLUSTER_PARTITION_HANDLING_STRATEGY: ((on_demand_broker_plan_10_selector_enabled_rabbitmq_cluster_partition_handling_strategy))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR_ENABLED_RABBITMQ_NUMBER_OF_NODES: ((on_demand_broker_plan_10_selector_enabled_rabbitmq_number_of_nodes))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR_ENABLED_RABBITMQ_PERSISTENT_DISK_TYPE: ((on_demand_broker_plan_10_selector_enabled_rabbitmq_persistent_disk_type))
      ON_DEMAND_BROKER_PLAN_10_SELECTOR_ENABLED_RABBITMQ_VM_TYPE: ((on_demand_broker_plan_10_selector_enabled_rabbitmq_vm_type))
      SYSLOG_SELECTOR: ((syslog_selector))
      SYSLOG_SELECTOR_ENABLED_ADDRESS: ((syslog_selector_enabled_address))
      SYSLOG_SELECTOR_ENABLED_PORT: ((syslog_selector_enabled_port))
      SYSLOG_SELECTOR_ENABLED_SYSLOG_CA_CERT: ((syslog_selector_enabled_syslog_ca_cert))
      SYSLOG_SELECTOR_ENABLED_SYSLOG_FORMAT: ((syslog_selector_enabled_syslog_format))
      SYSLOG_SELECTOR_ENABLED_SYSLOG_PERMITTED_PEER: ((syslog_selector_enabled_syslog_permitted_peer))
      SYSLOG_SELECTOR_ENABLED_SYSLOG_TLS: ((syslog_selector_enabled_syslog_tls))
      SYSLOG_SELECTOR_ENABLED_SYSLOG_TRANSPORT: ((syslog_selector_enabled_syslog_transport))
      RABBITMQ_BROKER_DNS_HOST: ((rabbitmq_broker_dns_host))
      RABBITMQ_BROKER_OPERATOR_SET_POLICY_ENABLED: ((rabbitmq_broker_operator_set_policy_enabled))
      RABBITMQ_BROKER_POLICY_DEFINITION: ((rabbitmq_broker_policy_definition))
      RABBITMQ_BROKER_STATIC_IPS: ((rabbitmq_broker_static_ips))
      RABBITMQ_HAPROXY_STATIC_IPS: ((rabbitmq_haproxy_static_ips))
      RABBITMQ_SERVER_CLUSTER_PARTITION_HANDLING: ((rabbitmq_server_cluster_partition_handling))
      RABBITMQ_SERVER_CONFIG: ((rabbitmq_server_config))
      RABBITMQ_SERVER_COOKIE: ((rabbitmq_server_cookie))
      RABBITMQ_SERVER_PLUGINS: ((rabbitmq_server_plugins))
      RABBITMQ_SERVER_PORTS: ((rabbitmq_server_ports))
      RABBITMQ_SERVER_SSL_CERT_PEM: ((rabbitmq_server_ssl_cert_pem))
      RABBITMQ_SERVER_SSL_PRIVATE_KEY_PEM: ((rabbitmq_server_ssl_private_key_pem))
      RABBITMQ_SERVER_SERVER_ADMIN_USERNAME: ((rabbitmq_server_server_admin_username))
      RABBITMQ_SERVER_SERVER_ADMIN_PASSWORD: ((rabbitmq_server_server_admin_password))
      RABBITMQ_SERVER_SSL_CACERT: ((rabbitmq_server_ssl_cacert))
      RABBITMQ_SERVER_SSL_FAIL_IF_NO_PEER_CERT: ((rabbitmq_server_ssl_fail_if_no_peer_cert))
      RABBITMQ_SERVER_SSL_VERIFICATION_DEPTH: ((rabbitmq_server_ssl_verification_depth))
      RABBITMQ_SERVER_SSL_VERIFY: ((rabbitmq_server_ssl_verify))
      RABBITMQ_SERVER_SSL_VERSIONS: ((rabbitmq_server_ssl_versions))
      RABBITMQ_SERVER_STATIC_IPS: ((rabbitmq_server_static_ips))
      RABBITMQ_SERVER_INSTANCES: ((rabbitmq_server_instances))
      RABBITMQ_SERVER_INSTANCE_TYPE: ((rabbitmq_server_instance_type))
      RABBITMQ_SERVER_PERSISTENT_DISK_MB: ((rabbitmq_server_persistent_disk_mb))
      RABBITMQ_HAPROXY_INSTANCES: ((rabbitmq_haproxy_instances))
      RABBITMQ_HAPROXY_INSTANCE_TYPE: ((rabbitmq_haproxy_instance_type))
      RABBITMQ_BROKER_INSTANCES: ((rabbitmq_broker_instances))
      RABBITMQ_BROKER_INSTANCE_TYPE: ((rabbitmq_broker_instance_type))
      ON_DEMAND_BROKER_INSTANCES: ((on_demand_broker_instances))
      ON_DEMAND_BROKER_INSTANCE_TYPE: ((on_demand_broker_instance_type))
      ON_DEMAND_BROKER_PERSISTENT_DISK_MB: ((on_demand_broker_persistent_disk_mb))

- name: disable-errands
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [config-product]
    - get: om-cli
      params:
        globs:
        - "*om-linux*"
      passed: [config-product]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs: []
      passed: [config-product]
      trigger: true
    - get: jq
      params:
        globs:
        - "*linux64*"
      passed: [config-product]

  - task: disable-errands
    file: pipelines-repo/tasks/disable-errands/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))
      PRODUCT_IDENTIFIER: ((product_identifier))
      ERRANDS: ((errands_to_disable))

- name: apply-changes
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [disable-errands]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs: []
      passed: [disable-errands]
      trigger: true
    - get: om-cli
      params:
        globs:
        - "*-linux"
      passed: [disable-errands]

  - task: apply-changes
    file: pipelines-repo/tasks/apply-changes/task.yml
    params:
      DEBUG: ((debug))
      OPS_MGR_HOST: ((ops_mgr_host))
      OPS_MGR_USR: ((ops_mgr_usr))
      OPS_MGR_PWD: ((ops_mgr_pwd))

- name: set-upgrade-pipeline
  plan:
  - aggregate:
    - get: pipelines-repo
      passed: [apply-changes]
    - get: pivnet-product
      resource: pivnet-product
      params:
        globs: []
      passed: [apply-changes]
      trigger: true

  - task: set-upgrade-pipeline
    file: pipelines-repo/tasks/set-upgrade-pipeline/task.yml
    params:
      DEBUG: ((debug))
      CONCOURSE_USERNAME: ((concourse_user))
      CONCOURSE_PASSWD: ((concourse_pwd))
      CONCOURSE_URL: ((concourse_url))
      BUILD_PIPELINE_NAME: ((pipeline-name))
      BUILD_TEAM_NAME: ((team-name))
      UPGRADE_PIPELINE_NAME: ((upgrade-pipeline-name))
      PRODUCT_NAME: ((product_name))
      PRODUCT_IDENTIFIER: ((product_identifier))
      PRODUCT_VERSION: ((product_version))
